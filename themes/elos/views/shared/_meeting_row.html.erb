<%# Params passed to render partial %>
<% [user, room, meeting, recording] %>

<tr class="meeting-row d-flex row tr-row rec-<%= recording.present? %>">
  <%# Meeting name and description %>
  <td class="col-10 col-md-5 td-titles" data-search-field="1">
    <% meeting_name = meeting[:meetingName] ? meeting[:meetingName] : recording[:metadata][:name] %>
    <div class="item-title word-break" title="<%= meeting_name %>">
      <%= meeting_name.truncate(50) %>
    </div>
    <% if recording.present? %>
      <div class="item-description" data-search-field="1">
        <% meeting_description = recording[:metadata][:'bbb-recording-description'] ? recording[:metadata][:'bbb-recording-description'] : nil %>
        <div id='recording-description-text' class="word-break" title="<%= meeting_description %>">
          <%= meeting_description&.truncate(100) %>
        </div>
      </div>
    <% end %>
  </td>

  <%# Meeting creation date %>
  <td class="col-6 col-md-1">
    <%= format_date(meeting[:startTime].to_i, :day_month_year, false) %>

    <% scheduled_meeting_id = meeting[:metadata][:'bbb-meeting-db-id'] %>
    <% if recurring_meeting?(scheduled_meeting_id)%>
      <span class="badge badge-recurring-meeting">
        <span>
          <%= t("default.scheduled_meeting.repeat_options.#{meeting_recurrence(scheduled_meeting_id)}") %>
        </span>
      </span>
    <% end %>
  </td>

  <%# Meeting creation time %>
  <td class="col-6 col-md-1">
    <%= format_time(meeting[:startTime].to_i) %>
  </td>

  <%# Meeting duration %>
  <td class="col-12 col-md-2 text-center">
    <% duration = meeting[:endTime].to_i/1000 - meeting[:startTime].to_i/1000 %>
    <% if duration/60 > 0 %>
      <%= duration_in_hours_and_minutes(duration).capitalize %>
    <% else %>
      <%= t("meetings.duration.less_than_a_minute") %>
    <% end %>
  </td>

  <%# Meeting with recording %>
  <% if recording.present? %>
    <%# Recording visibility %>
    <td class="<%= recording[:published] ? 'col-6' : 'col-12' %> col-md-1">
      <% if recording[:published] %>
        <%= icon_visibility(title: t("meetings.recording.published"), class: 'color-secondary fa-2x') %>
      <% else %>
        <%= icon_visibility_off(title: t("meetings.recording.unpublished"), class: 'color-gray-04 fa-2x') %>
      <% end %>
    </td>

    <%# Recording state/action icons %>
    <td class="col-6 col-md-1 flex-row-reverse">
      <% if recording[:state] != 'processing' %>
        <% if recording[:published] %>
          <% if can_download_recording?(user, room)%>
            <% recording[:playbacks].each do |p| %>
              <% url = playback_url(room, recording[:recordID], p) %>
              <% if p[:type] == 'presentation' %>
                <%= link_to icon_conference_play(title: t("meetings.recording.playbacks.#{p[:type]}"), class: 'fa-2x'), url, class: 'd-flex text-decoration-none', target: "_blank" %>
              <% else %>
                <%= link_to icon_file_download(title: t("meetings.recording.playbacks.#{p[:type]}"), class: 'fa-2x'), url, class: 'd-flex text-decoration-none mr-2', target: "_blank" %>
              <% end %>
            <% end %>
          <% else %>
            <% url = playback_url(room, recording[:recordID], recording[:playbacks].find { |p| p[:type] == 'presentation' }) %>
            <%= link_to icon_conference_play(title: t("meetings.recording.playbacks.presentation"), class: 'fa-2x'), url, class: 'd-flex text-decoration-none', target: "_blank" %>
          <% end %>
        <% end %>
      <% else %>
        <%= icon_recording_load(title: t("meetings.recording.processing"), class: 'color-primary fa-2x') %>
      <% end %>
    </td>

    <%# Options dropdown %>
    <td class="col-2 col-md-1 td-dropdown-opts">
      <% if recording[:state] != 'processing' %>
        <div class="dropdown dropdown-opts">
          <a href="#" class="dropdown-toggle d-flex text-decoration-none" id="dropdown-opts-<%= recording[:recordID] %>" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            <%= icon_options_dots %>
          </a>
          <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdown-opts-<%= recording[:recordID] %>">

            <%# Copy playback link %>
            <% if recording[:published] %>
              <% playback = recording[:playbacks].find { |p| p[:type] == 'presentation' } %>
              <% if playback.present? %>
                <%=
                link_to t('meetings.recording.playback_link'), '#',
                data: {
                  'clipboard-text': playback_url(room, recording[:recordID], playback),
                  turbolinks: false,
                  'toast-id': '#playback-link-copied-toast'
                },
                class: "dropdown-item copy-to-clipboard"
                %>
              <% end %>
            <% end %>

            <% if can_edit?(user, room) %>
              <%# Unpublish recording %>
              <% if recording[:published] %>
                <div class="dropdown-divider"></div>
                <%= link_to recording_unpublish_path(room, record_id: recording[:recordID]),
                method: :post,
                data: { confirm: t('meetings.recording.confirm.unpublish') },
                class: "dropdown-item rec-edit" do %>
                  <%= t("meetings.recording.unpublish") %>
                <% end %>
              <%# Publish recording %>
              <% else %>
                <%= link_to recording_publish_path(room, record_id: recording[:recordID]),
                method: :post,
                data: { confirm: t('meetings.recording.confirm.publish') },
                class: "dropdown-item rec-edit" do %>
                  <%= t("meetings.recording.publish") %>
                <% end %>
              <% end %>
              <%# Delete recording %>
              <%= link_to recording_delete_path(room, record_id: recording[:recordID]),
              method: :post,
              data: { confirm: t('meetings.recording.confirm.destroy') },
              class: "dropdown-item rec-edit" do %>
                <%= t("meetings.recording.destroy") %>
              <% end %>

              <%# Download notes and participants %>
              <div class="dropdown-divider"></div>
              <%= render_async room_scheduled_meeting_internal_check_bucket_files_path(room, meeting[:meetingID], meeting[:internalMeetingID]) do %>
                <%= render "shared/placeholder-loading", text: t('meetings.meeting_data_download.download_notes') %>
                <%= render "shared/placeholder-loading", text: t('meetings.meeting_data_download.download_participants') %>
              <% end %>
            <% end %>
          </div>
        </div>
      <% end %>
    </td>

  <%# Meeting without recording, leave 'Status' and 'Recording' columns empty %>
  <% else %>
    <td class="col-md-1"></td>
    <td class="col-md-1"></td>
    <%# Options dropdown %>
    <td class="col-md-1 td-dropdown-opts">
      <% if can_edit?(user, room) %>
        <div class="dropdown dropdown-opts">
          <a href="#" class="dropdown-toggle d-flex text-decoration-none" id="dropdown-opts-<%= meeting[:meetingID] %>" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            <%= icon_options_dots %>
          </a>
          <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdown-opts-<%= meeting[:meetingID] %>">

          <%# Download notes and participants %>
          <%= render_async room_scheduled_meeting_internal_check_bucket_files_path(room, meeting[:meetingID], meeting[:internalMeetingID]) do %>
            <%= render "shared/placeholder-loading", text: t('meetings.meeting_data_download.download_notes') %>
            <%= render "shared/placeholder-loading", text: t('meetings.meeting_data_download.download_participants') %>
          <% end %>
          </div>
        </div>
      <% end %>
    </td>
  <% end %>
</tr>

<%= content_for :render_async %>
